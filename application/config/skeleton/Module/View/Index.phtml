<?php
/**
 * Index.php
 *
 * @package myMVC
 * @copyright ueffing.net
 * @author Guido K.B.W. Ãœffing <info@ueffing.net>
 * @license GNU GENERAL PUBLIC LICENSE Version 3. See application/doc/COPYING
 */

/**
 * @name ${module}View
 */
namespace {module}\View;

use MVC\Config;
use MVC\Registry;

/**
 * Index
 * @extends \MVC\View
 */
class Index extends \MVC\View
{
    /**
     * Index constructor.
     * @throws \ReflectionException
     */
	public function __construct ()
	{
		parent::__construct ();
        $this->sendSecurityHeader();
		$this->sContentVar = 'sContent';
	}

    /**
     * set HTTP Security Header
     * @return bool
     * @throws \ReflectionException
     */
    public function sendSecurityHeader()
    {
        if (null === get(\MVC\Registry::get('MODULE_{module}')['CSP']) || null === get(\MVC\Registry::get('MODULE_{module}')['CSP']['aMapping']))
        {
            return false;
        }

        $aCSP = \MVC\Registry::get('MODULE_{module}')['CSP'];
        $aCSPMapping = \MVC\Registry::get('MODULE_{module}')['CSP']['aMapping'];

        foreach ($aCSPMapping as $sKey => $sValue)
        {
            if (null === get($aCSP[$sKey]))
            {
                continue;
            }

            header($sKey . ': ' . trim(preg_replace('!\s+!', ' ', $aCSP[$sKey])));
        }

        return true;
    }

    /**
     * @param array $aRouting
     * @return void
     * @throws \ReflectionException
     * @throws \SmartyException
     */
    public function autoAssign(array $aRouting = array())
    {
        $this->sTemplateRelative = get($aRouting['template']['layout'], Config::get_MVC_SMARTY_TEMPLATE_DEFAULT());
        $this->sTemplate = $this->sTemplateDir . '/' . $this->sTemplateRelative;
        $this->assign('sTemplateRelative', $this->sTemplateRelative);
        $this->assign('sTemplate', $this->sTemplate);
        $this->assign('sTitle', get($aRouting['title'], ''));
        $this->assign('aRegistry', Registry::getStorageArray());
        $this->assign('aRouting', $aRouting);

        foreach (get($aRouting['template']['var']['set'], array()) as $sKey => $sValue)
        {
            $this->assign($sKey, trim($sValue));
        }

        foreach (get($aRouting['template']['var']['load'], array()) as $sKey => $sValue)
        {
            $this->assign($sKey, trim($this->loadTemplateAsString ($sValue)));
        }

        $sStyle = '';
        $sScript = '';

        foreach (get($aRouting['template']['sStyle'], array()) as $sKey => $sValue)
        {
            $sStyle.= '<link href="' . $sValue . '" rel="stylesheet" type="text/css">' . "\n";
        }

        foreach (get($aRouting['template']['sScript'], array()) as $sKey => $sValue)
        {
            $sScript.='<script src="' . $sValue . '" type="text/javascript"></script>' . "\n";
        }

        $this->assign('sStyle', $sStyle);
        $this->assign('sScript', $sScript);
    }
}
