<?php
/**
 * Index.php
 *
 * @package myMVC
 * @copyright ueffing.net
 * @author Guido K.B.W. Ãœffing <info@ueffing.net>
 * @license GNU GENERAL PUBLIC LICENSE Version 3. See application/doc/COPYING
 */

/**
 * @name ${module}View
 */
namespace {module}\View;

use MVC\Config;
use MVC\DataType\DTRoute;
use {module}\DataType\DTRoutingAdditional;

/**
 * Index
 * @extends \MVC\View
 */
class Index extends \MVC\View
{
    /**
     * @var \MVC\View
     */
    protected static $_oInstance = NULL;

    /**
     * Index constructor.
     * @throws \ReflectionException
     */
    protected function __construct ()
	{
		parent::__construct ();
        $this->sendSecurityHeader();
		$this->sContentVar = 'sContent';
	}

    /**
     * @return \MVC\View|\{module}\View\Index|null
     */
    public static function init ()
    {
        if (null === self::$_oInstance)
        {
            self::$_oInstance = new self ();
        }

        Config::set_MVC_MODULE_CURRENT_VIEW(self::$_oInstance);

        return self::$_oInstance;
    }
    
    /**
     * set HTTP Security Header
     * @return bool
     * @throws \ReflectionException
     */
    public function sendSecurityHeader()
    {
        $aCSPMapping = array(
            // header key                   CSP config key
            'Content-Security-Policy'   => 'Content-Security-Policy',   // Default
            'X-Content-Security-Policy' => 'Content-Security-Policy',   // IE
            'X-Webkit-CSP'              => 'Content-Security-Policy',   // Chrome, Safari
            'X-Frame-Options'           => 'X-Frame-Options',
            'X-XSS-Protection'          => 'X-XSS-Protection',
            'Strict-Transport-Security' => 'Strict-Transport-Security',
        );

        $aCSP = get(\MVC\Registry::get('MODULE')['{module}']['CSP'], array());

        foreach ($aCSPMapping as $sKey => $sValue)
        {
            if (null === get($aCSP[$sKey]))
            {
                continue;
            }

            header($sKey . ': ' . trim(preg_replace('!\s+!', ' ', $aCSP[$sKey])));
        }

        return true;
    }

    /**
     * @param \MVC\DataType\DTRoute|null $oDTRoute
     * @return void
     * @throws \ReflectionException
     */
    public function autoAssign(DTRoute $oDTRoute = null)
    {
        $oDTRoutingAdditional = DTRoutingAdditional::create(json_decode($oDTRoute->get_additional(), true));

        $this->sTemplateRelative = (isset($oAdditional->layout)) ? $oAdditional->layout : Config::get_MVC_SMARTY_TEMPLATE_DEFAULT();
        $this->sTemplate = $this->sTemplateDir . '/' . $this->sTemplateRelative;
        $this->assign('sTemplateRelative', $this->sTemplateRelative);
        $this->assign('sTemplate', $this->sTemplate);
        $this->assign('oDTRoute', $oDTRoute);
        $this->assign('oDTRoutingAdditional', $oDTRoutingAdditional);
        $this->assign('layout', trim($this->loadTemplateAsString($oDTRoutingAdditional->get_sLayout())));
    }
}